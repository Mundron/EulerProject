// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1+2+3+4+5+6+7=28.
//
// What is the value of the first triangle number to have five hundert divisors
package main

import (
	"eulerproject/utils/primes"
	"fmt"
)

func divisorCount(primeFactorization map[int]int) int {
	result := 1
	for _, v := range primeFactorization {
		result *= v + 1
	}
	return result
}

func main() {
	p := primes.NewPrimes()
	number := uint64(7)
	triangleNumber := uint64(28)
	numberDivisors := 6
	primeFactorization := make(map[int]int)
	for {
		number++
		triangleNumber += number
		primeFactorization = primes.GetPrimeFactorization(triangleNumber, p)
		numberDivisors = divisorCount(primeFactorization)
		if numberDivisors > 500 {
			break
		}
	}
	fmt.Printf(
		"The %vth triangle number\n%v\nhas %v divisors and factorization %v\n",
		number,
		triangleNumber,
		numberDivisors,
		primeFactorization,
	)
}
